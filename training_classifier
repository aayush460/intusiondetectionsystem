import pandas as pd
import numpy as npa
from keras.utils import to_categorical
from sklearn.preprocessing import (StandardScaler, OrdinalEncoder,LabelEncoder, MinMaxScaler)
pd.options.mode.chained_assignment = None  

proto_values = ['tcp', 'udp', 'arp', 'ospf', 'icmp', 'igmp', 'rtp', 'ddp','ipv6-frag', 'cftp', 'wsn', 'pvp', 'wb-expak', 'mtp',
                'pri-enc', 'sat-mon', 'cphb', 'sun-nd', 'iso-ip', 'xtp', 'il','unas', 'mfe-nsp', '3pc', 'ipv6-route', 'idrp',
                'bna', 'swipe','kryptolan', 'cpnx', 'rsvp', 'wb-mon', 'vmtp', 'ib', 'dgp','eigrp', 'ax.25', 'gmtp', 'pnni',
                'sep', 'pgm', 'idpr-cmtp','zero', 'rvd', 'mobile', 'narp', 'fc', 'pipe', 'ipcomp','ipv6-no', 'sat-expak', 'ipv6-opts', 
                'snp', 'ipcv','br-sat-mon', 'ttp', 'tcf', 'nsfnet-igp', 'sprite-rpc', 'aes-sp3-d', 'sccopmce', 'sctp', 'qnx', 
                'scps', 'etherip','aris', 'pim', 'compaq-peer', 'vrrp', 'iatp', 'stp','l2tp', 'srp', 'sm', 'isis', 'smp', 'fire',
                'ptp', 'crtp','sps', 'merit-inp', 'idpr', 'skip', 'any', 'larp', 'ipip','micp', 'encap', 'ifmp', 'tp++', 'a/n',
                'ipv6', 'i-nlsp', 'ipx-n-ip', 'sdrp', 'tlsp', 'gre', 'mhrp', 'ddx', 'ippc','visa', 'secure-vmtp', 'uti', 'vines', 
                'crudp', 'iplt','ggp', 'ip', 'ipnip', 'st2', 'argus', 'bbn-rcc', 'egp','emcon', 'igp', 'nvp', 'pup', 'xnet', 
                'chaos', 'mux', 'dcn','hmp', 'prm', 'trunk-1', 'xns-idp', 'leaf-1', 'leaf-2', 'rdp','irtp', 'iso-tp4', 'netblt',
                'trunk-2', 'cbt']

state_values = ['FIN', 'INT', 'CON', 'ECO', 'REQ', 'RST', 'PAR', 'URN', 'no','ACC', 'CLO']

service_values = ['-', 'ftp', 'smtp', 'snmp', 'http', 'ftp-data','dns', 'ssh', 'radius', 'pop3', 'dhcp', 'ssl', 'irc']

attack_cat_values = ['Normal', 'Backdoor', 'Analysis', 'Fuzzers', 'Shellcode','Reconnaissance', 'Exploits', 'DoS', 'Worms',
                     'Generic']


def unsw_encoding(params):
    
    train_data_path = "C:/Users/Aayush Baghel/Downloads/UNSW_NB15_training-set.csv"
    test_data_path = "C:/Users/Aayush Baghel/Downloads/UNSW_NB15_testing-set.csv"

    train_df = pd.read_csv(train_data_path).drop(['id', 'label'], axis=1)
    test_df = pd.read_csv(test_data_path).drop(['id', 'label'], axis=1)
    

    def process_dataframe(df):
   
        for i in range(len(attack_cat_values)):
            df['attack_cat'] = df['attack_cat'].replace( [attack_cat_values[i]], i)

        y = df['attack_cat']
        x = df.drop(columns='attack_cat')
        

        if params['encoder'] == 'ordinalencoder':
            x = OrdinalEncoder().fit_transform(x)
    
        elif params['encoder'] == 'labelencoder':
            x = x.apply(LabelEncoder().fit_transform)
            
        else:

            for i in range(len(proto_values)):
                x['proto'] = x['proto'].replace(proto_values[i], i)

            for i in range(len(state_values)):
                x['state'] = x['state'].replace(state_values[i], i)

            for i in range(len(service_values)):
                x['service'] = x['service'].replace(service_values[i], i)
            
            if params['encoder'] == "standardscaler":
                x = StandardScaler().fit_transform(x)
            
            elif params['encoder'] == "minmaxscaler01":
                x = MinMaxScaler(feature_range=(0, 1)).fit_transform(x)
            
            elif params['encoder'] == "minmaxscaler11":
                x = MinMaxScaler(feature_range=(-1, 1)).fit_transform(x)

        return x, y

    x_train, Y_train = process_dataframe(train_df)
    x_test, Y_test = process_dataframe(test_df)

    y_train = to_categorical(Y_train)
    y_test = to_categorical(Y_test)

    return x_train, x_test, y_train, y_test


import numpy as np
import pandas
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import (confusion_matrix, roc_auc_score, precision_score, auc)
from sklearn.preprocessing import (StandardScaler, OrdinalEncoder, LabelEncoder, MinMaxScaler)

params = {'features_nb': 4, 'batch_size': 1024,'encoder': 'labelencoder', 'dataset': 'unsw'}

params_var = {
              'encoder': ['standardscaler', 'labelencoder', 'minmaxscaler01', 'minmaxscaler11','ordinalencoder'],
              'batch_size': [128, 256, 512, 1024, 2048],
              'features_nb': [4, 8, 41],
              'train_data': [494021, 4898431, 125973, 25191],
              }


def load_data():
    if params['dataset'] == 'kdd':
        return kdd_encoding(params)
    elif params['dataset'] == 'unsw':
        return unsw_encoding(params)


def print_results_classifier(model):
    print(model.score(x_test, y_test))
    y_pred = model.predict(x_test)
    print('\nConfusion Matrix:')
    print(confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1)))


def MLPClassifier_train():
    print('*** MULTI LAYER PERCEPTRON ***')
    model = MLPClassifier(warm_start=True, verbose=True,
                          learning_rate='adaptive', early_stopping=True,
                          batch_size=params['batch_size'])
    model.fit(x_train, y_train)
    print_results_classifier(model)


def RandomForestClassifier_train():
    print('*** RANDOM FOREST ***')
    model = RandomForestClassifier(verbose=1, warm_start=True)
    model.fit(x_train, y_train)
    print_results_classifier(model)


def DecisionTreeClassifier_train():
    print('*** DECISION TREE ***')
    model = DecisionTreeClassifier()
    model.fit(x_train, y_train)
    print_results_classifier(model)


def ExtraTreesClassifier_train():
    print('***Extra Tree')
    model = ExtraTreesClassifier()
    model.fit(x_train,y_train)
    print_results_classifier(model)
    
    
def KNeighborsClassifier_train():
    print('*** K-NEAREST NEIGHBORS ***')
    model = KNeighborsClassifier()
    model.fit(x_train, y_train)
    print_results_classifier(model)


if __name__ == "__main__":
    x_train, x_test, y_train, y_test = load_data()
    
    ExtraTreesClassifier_train()
